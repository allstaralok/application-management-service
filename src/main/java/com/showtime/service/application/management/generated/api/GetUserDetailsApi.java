/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.showtime.service.application.management.generated.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.showtime.service.application.management.generated.model.Users;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-04-12T21:36:58.218Z")

@Api(value = "getUserDetails", description = "the getUserDetails API")
@RequestMapping(value = "/applicationManagement/v1")
public interface GetUserDetailsApi {
	
	Logger log = LoggerFactory.getLogger(GetUserDetailsApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "User Details", nickname = "getUserDeatils", notes = "", response = Users.class, tags={ "AllUsers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "*OK* - User featched successfully. ", response = Users.class) })
    @RequestMapping(value = "/getUserDetails/{username}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    default ResponseEntity<Users> getUserDeatils(@ApiParam(value = "User signing in Details ",required=true) @PathVariable("username") String username,@ApiParam(value = "The locale of the client " ) @RequestHeader(value="Accept-Language", required=false) String acceptLanguage) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json;charset=utf-8")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"accountDetails\" : {    \"lastBookingDetails\" : {      \"lastBookingTotal\" : 6.02745618307040320615897144307382404804229736328125,      \"lastBookingDate\" : \"2000-01-23T04:56:07.000+00:00\",      \"lastBookingtype\" : \"lastBookingtype\"    },    \"isActive\" : \"isActive\",    \"activeFrom\" : \"2000-01-23T04:56:07.000+00:00\",    \"username\" : \"username\",    \"lastDate\" : \"2000-01-23T04:56:07.000+00:00\"  },  \"personalDetails\" : {    \"contactNumber\" : \"contactNumber\",    \"fullName\" : \"fullName\",    \"age\" : 0,    \"username\" : \"username\"  },  \"email\" : \"email\",  \"username\" : \"username\"}", Users.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json;charset=utf-8", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default GetUserDetailsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
